# -*- coding: utf-8 -*-
"""disease prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N3qG0B9DJyhKmjg-BooMrPq2YcrJiuQ1
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score

# Load the train and test datasets
train_df = pd.read_csv('Training.csv')
test_df = pd.read_csv('Testing.csv')

# Combine train and test datasets
data = pd.concat([train_df, test_df], ignore_index=True)

# Save the combined dataset to a new CSV file
data.to_csv('data.csv', index=False)

import pandas as pd

# Load the dataset
file_path = '/content/data.csv'
data = pd.read_csv(file_path)

# Display the first few rows of the dataset
print(data.head())

# Check for missing values
print(data.isnull().sum())

# Select only numeric columns for calculating the mean
numeric_data = data.select_dtypes(include=['number'])

# Fill missing values with mean for numeric columns only
numeric_data.fillna(numeric_data.mean(), inplace=True)

# Update the original DataFrame with the filled numeric columns
data[numeric_data.columns] = numeric_data

# Convert categorical variables to dummy/indicator variables
data = pd.get_dummies(data)

# Separate features (X) and target (y)
# Assuming the last column is the target variable
X = data.iloc[:, :-1]
y = data.iloc[:, -1]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.impute import SimpleImputer # Import SimpleImputer

# Initialize the imputer
imputer = SimpleImputer(strategy='mean') # Create an instance of SimpleImputer

# Fit and transform the imputer on the training data
X_train = imputer.fit_transform(X_train) # Fit and transform on X_train

# Transform the test data using the trained imputer
X_test = imputer.transform(X_test) # Only transform on X_test

# Initialize the model
model = RandomForestClassifier(random_state=42)

# Train the model
model.fit(X_train, y_train)

# prompt: evaluate the model

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Feature importance
importances = model.feature_importances_
feature_names = X.columns

# Ensure feature_names and importances have the same length
feature_names = feature_names[0:len(importances)]

# Create a DataFrame for better visualization
feature_importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})

# Sort the DataFrame by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

print(feature_importance_df)

